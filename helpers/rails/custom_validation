Custom Validators
There are three ways to implement custom validators, with examples in Section 6 of the Rails Guide.
http://guides.rubyonrails.org/active_record_validations.html#performing-custom-validations

Of the three, #validate is the simplest. If your validation needs become more complex, consult the documentation. For most validations, though, the following method should be good enough.

1) Create a new directory in app called validators. Because most Rails developers don't need to write custom validation, this directory is not created by default like models or controllers.
2) Identify the ActiveRecord attribute you want to validate. Is it the email or the last_name on the Person class, for example?
3) Create a new file in the app/validators directory of the form attribute (from the previous step) + _validator.rb. So in the case of validating an attribute called email, create a file app/validators/email_validator.rb
4) Inside the new file, define the class. The class name should match the file name of the file, but "Camel-Cased." So email_validator should be class EmailValidator. The class should inherit from ActiveModel::Validator
5) The validator class must have one instance method, #validate. This method will receive one argument typically called record.
6) Inside of #validate, you'll be able to get properties from record and determine whether it is invalid. If the record is invalid, push (<<) to record.errors[:attribute] e.g. record.errors[:email] a String which is a message that you want to display that describes why the message is not valid.
7) Lastly, in the implementation of the class being validated e.g. Person, add:
  a) An include of ActiveModel::Validations
  b) The helper call: validates_with (className). In our example we'd put, validates_with EmailValidator (see step 4, above)
  c) The result of these steps should be the following:

class EmailValidator < ActiveModel::Validator
  def validate(record)
    unless record.email.match?(/flatironschool.com/)
      record.errors[:email] << "We're only allowed to have people who work for the company in the database!"
    end
  end
end
class Person
  include ActiveModel::Validations
  validates_with EmailValidator
end
Here we validate that all email addresses are in the flatironschool.com domain.
